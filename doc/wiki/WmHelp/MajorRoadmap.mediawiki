<!-- Copyright (c)  2009  Glen E. Ivey
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3;
     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
     A copy of the license is in the file COPYING.DOCUMENTATION
  -->


This [[WmHelp:GlossaryPtoZ#anchor_Wontology|wontology]] is stored in and maintained by the [[WmHelp:GlossaryPtoZ#anchor_WontoMedia|WontoMedia]] web server application.  WontoMedia is still in development and is very much less than it is ultimately expected to be--after all "[http://www.cambrianhouse.com/blog/startups-entrepreneurship/why-being-embarrassed-is-critical-to-the-success-of-your-startup/ If you're not embarrassed by the first version of your product, you've launched too late.]"  This page is a summary of some of the additional features and capabilities planned for WontoMedia going forward, especially those related to WontoMedia's ability to support ontologies that use the full expressiveness of the [[WmHelp:GlossaryAtoO#anchor_OWL|Web Ontology Language (OWL)]], and to interchange ontology data using public standards.

Hopefully if you find yourself unable to express the information you want within WontoMedia, the capability you need is somewhere on the list in this page, so you can either wait for the capability you need to be added, or [http://wontomedia.rubyforge.org/ add it yourself].  The lists in this page are grouped based on related functionality&mdash;the order of items in the page does not represent the order in which they may be added to the system.  An ordered list of our near-term development plans can be found in [https://www.pivotaltracker.com/projects/9280 Pivotal Tracker].

<h3>Information Finding and Navigation</h3>

Currently, the only way to access existing [[WmHelp:GlossaryAtoO#anchor_Node|nodes]] is through the <code>/nodes</code> page which lists <em>all</em> of them, or by navigating from one node to another through the [[WmHelp:GlossaryAtoO#anchor_Edge|edges]] that link them.  This is already cumbersom and will only become more so as the amount of data increases.  The following features are planned to address this:

;Topics
:The nodes and edges contained in a wontology site will be divided up into a number of different groups, each containing information about a specific subject area or topic.  We refer to the groups as "''topics''".  In addition to each topic containing its own nodes and edges, topics will be able to contain other topics to allow better organization.  It will be possible to display the list of nodes or edges for any particular topic (alone, or including all sub-topics), just as it is currently possible to see lists of all the nodes and edges in the site over all.  When selecting nodes (to be referenced by an edge), selections will be grouped by topic, with the current and related topics available most easily.
;Graphic Display of Relationships
:Many [http://en.wikipedia.org/wiki/Ontology_editor non-wontology tools] for creating or displaying information stored in an ontology provide a graphical display of nodes and edges, with some type of icon representing each node, and connecting arrows representing the edges.  WontoMedia will eventually have such a display in place of the current text tables in node information pages.
;Search
:We will integrate Google search so that you can search for nodes and edges within a wontology by the text of their [[WmHelp:GlossaryPtoZ#anchor_Title|Titles]], [[WmHelp:GlossaryAtoO#anchor_Name|Names]], and/or [[WmHelp:GlossaryAtoO#anchor_Description|Descriptions]].  (For edges, the Titles and Names of the referenced nodes will be searched.)
;Formatting of Descriptions
:Currently, the content of long [[WmHelp:GlossaryAtoO#anchor_Description|Descriptions]] can be difficult to read.  WontoMedia will eventually support some type of markup language within node Description fields.

<span id="remaining_ontology_expressiveness"></span>
<h3>Expressiveness of Ontologies</h3>

While the edges-referencing-nodes model is the core of any ontology, there are common variations on this pattern that WontoMedia does not yet support.  These include:

;Literal Object Values
:Right now, the [[WmHelp:GlossaryAtoO#anchor_Object|object]] of an edge must be a node.  However, there are many cases where an edge is really intended to express a constant value.  For example, consider an wontology that lists cars.  This wontology might contain edges like "ACar isOwnedBy JohnSmith".  This edge can easily be expressed as WontoMedia operates now, and makes sense because both of the nodes "ACar" and "JohnSmith" represent real things.  But an edge like "ACar hasTheVINNumber 123456789Q" is problematic, because the object isn't really something appropriate to be represented by a node, it is simply an arbitrary constant.  Even more obviously inappropriate to be represented by nodes are the objects of the potential edges "ACar sOdometerAtLastServicing 33,476" and "ACar wasPurchasedNewOn April 20, 2008".  It would be unreasonable to create nodes in the wontology to represent every possible mileage value or every date in the calendar.  So, at some point, WontoMedia will support the creation of edges whose objects are simple constants, and will support a variety of common data types for these constants.
;Edges as Subjects or Objects of Other Edges
:In some wontologies, it will be appropriate to have "statements about" (edges referring to other) edges.  For example, usually an edge in an [[WmHelp:GlossaryAtoO#anchor_Ontology|ontology]] is assumed to represent a fact.  However, some edges may repressent <em>assertions</em> that are attributable to specific entities.  When searching or using the information in a wontology, it can be important to represent <em>who</em> made the assertion represented by a particular edge.  For example, the fact "Fred says TheNewItalianRestraunt is VeryGood" can be represented by two edges.  First, "TheNewItalianRestraunt is VeryGood", and then "Fred says ____", where the blank is a reference to the first edge.  In information science, a statement that is itself referenced by other statements is said to be '''reiffied'''.  Edges can be reiffied to indicate other things about them, like the statement "TheParkingLot hasACurrentCarCountOf 52 wasRecordedAt April 21, 2008 17:05:23GMT".

<span id="remaining_owl_semantics"></span>
<h3>Additional Ontology Relationships Supported by OWL</h3>

OWL, the Web Ontology Language, defines a number of specific object and relationship types that are intended to have a consistent meaning across all systems that implement the OWL standard.  These relationship types provide for an ontology which contains statements about itself.  For example, OWL predicates (relationship types) can be used to make statements about the ''other'' relationships in which a node participates, such as constraining the domain, range, or cardinality of a node's relationship, or of the relationships of the children of that node (the instances of a class which a node defines).

In its current state, WontoMedia can express ontologies which use the semantics represented by the following standard entities:  rdfs:Resource, rdf:Property, rdfs:subPropertyOf, rdfs:label, rdfs:comment, owl:inverseOf, and owl:SymmetricProperty.  Note that any OWL-encoded ontology can be stored in WontoMedia, but the other OWL-defined items are current treated as "generic" without any enforcement of the meanings the standard creates.

The following are several types of OWL-defined relationships for which WontoMedia does not yet enforce the intended semantics.

;Constructs Matching Other Features
:Once the [[#remaining_ontology_expressiveness|remaining "Expressiveness" features]] listed above are implemented, WontoMedia will implement relationship semantics equivalent to those define by OWL's rdfs:Literal, rdf:XMLLiteral, rdfs:Datatype, rdf:Statement, and rdf:value elements.
;Standardized Node Information
:Currently, the Title and Description of a node are mapped directly to OWL properties (rdfs:label and rdfs:comment, respectively).  Support will be added to the basic node creation and display interfaces for the inclusion of one or more web addresses (URIs) as a standard part of each node, which will map to rdfs:seeAlso and rdfs:isDefinedBy.
;Node Grouping
:Groups can be created with WontoMedia currently simply by creating a node to represent the group, and then using some type of [[WmHelp:GlossaryAtoO#anchor_Hierarchical|hierarchical]] [[WmHelp:GlossaryPtoZ#anchor_Property|property]] to indicate the nodes which are contained in the group.  However, WontoMedia isn't able to distinguish this from any other kind of hierarchical structure.  OWL contains keywords and semantics specifically for indicating groups.  While the representative nodes could be duplicated generically in the current WontoMedia, we will be adding specific support for rdf:Bag and rdfs:Container, so that groups can be presented in pages more compactly and edited more efficiently.
;Lists
:OWL includes special list-specific semantics, including support for representing the intended use and order of list items.  Again, WontoMedia can express the relationships OWL uses for this currently, but will be extended with specific internal support for the semantics of OWLs terms, so that the appropriate groups of nodes can be displayed as actual lists.  The OWL elements defining the semantics that will be implemented for WontoMedia lists include rdf:Seq, rdf:Alt, rdf:List, rdfs:member, rdfs:ContainerMembershipProperty, rdf:first, and rdf:rest.
;Classes
:OWL contains a number of properties that allow statements to be made about the structure of the ontology itself.  For example, some nodes can be used to define "classes" of other nodes within the ontology, by associating them with properties that make assertions about their child nodes.  For example, in a wontology used to record facts about an organization's fleet of vehicles, the node "Car" could be created to be the parent of (and define the class for) all of the nodes representing specific cars in the fleet.  So, to relate this with the example above, there would be the statement "ACar isA Car".  OWL defines properties that can then be applied to "Car" to establish rules for nodes which are children of "Car".  These rules would be things like "children of 'Car' must have exactly one hasTheVINNumber property".  WontoMedia can currently express all of the relationships that OWL uses for class definition, but will eventually also enforce the rules that these relationships establish, and will use them to prompt users to provide all required information/relationships when new nodes of an existing class are created.  The OWL elements defining the class-hierarchy semantics that WontoMedia will implement include structural elements (rdfs:Class, owl:Class, rdf:type, rdfs:subClassOf, owl:allValuesFrom, owl:equivalentClass, owl:equivalentProperty, owl:Nothing, owl:ObjectProperty, owl:sameAs, and owl:Thing) and property-defining elements (rdfs:domain, rdfs:range, owl:AllDifferent, owl:cardinality, owl:maxCardinality, owl:minCardinality, owl:DataRange, owl:DatatypeProperty, owl:differentFrom, owl:disjointWith, owl:distinctMembers, owl:hasValue, owl:complementOf, owl:intersectionOf, owl:oneOf, owl:onProperty, owl:someValuesFrom, and owl:unionOf).


<span id="standard_import_export"></span>
<h3>Import or Export of Information</h3>

WontoMedia currently has a primitive ability to export and import the full set of nodes (in [http://en.wikipedia.org/wiki/Yaml YAML format]) and edges (in [http://en.wikipedia.org/wiki/Notation3 N3 format]), but these are intended for backup and restore of a complete wontology by system administrators, and not for regular use.  Planned features for interoperability with other standards-based ontology systems include:

;XML Data Download/Export
:WontoMedia will be able to download its content in RDF-standard XML for an entire wontology site, a complete topic or subtopic, or for an individual node.  "Data" nodes and edges will be separated from any "schema" nodes/edges the wontology contains based on standards compliance.  Those nodes and edges that can be expressed purely in RDF, without use of any RDFS or OWL elements are considered "data".
;XML Schema Export
:It will also be possible to separately download the "schema" portions of a wontology or topic as OWL-standard XML, or to download a mixed data-and-schema file (in OWL) for the entire wontology, a topic/subtopic, a node, or a node and all of its children.
;XML Upload/Import
:WontoMedia will accept the upload of OWL-standard XML files for ''merging'' with its existing content.  During import, redundant or error-causing items will be skipped.


<h3>Community Features</h3>

WontoMedia implements a "wiki like" ontology system (hence, a wontology).  And as such, an important part of its functionality is the ability for different people to edit and add to a wontology's content, so that the information can be community-owned and ultimately superior to what any one contributor would have produced.  There are a number of not-yet-implemented features, all analogous to features common in virtually all wiki systems, related to this:

;Accounts and Profiles for Contributors
:Currently, WontoMedia does not require people to log-in or otherwise identify themselves in order to make changes.  While this will remain a configurable option going forward, WontoMedia will support the creation of individual contributor accounts, so that contributors can be credited with their work, and so that we can support discussions between contributors about changes in the wontologies' content.
;Change Tracking for Nodes and Edges
:Along with user accounts, most wiki's record the changes made to the information they contain, and allow previous states of the data to be restored.  WontoMedia will eventually support equivalent tracking for changes made to nodes and edges.
