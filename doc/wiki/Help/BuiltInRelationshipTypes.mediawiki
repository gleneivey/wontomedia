<!-- Copyright (c)  2010  Glen E. Ivey
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3;
     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
     A copy of the license is in the file COPYING.DOCUMENTATION
  -->
In general, a [[Help:GlossaryPtoZ#anchor_Wontology|wontology]] can be created completely from scratch, using no previously-defined "vocabulary" ([[Help:GlossaryAtoO#anchor_Item|items]], especially [[Help:GlossaryPtoZ#anchor_Property|Property]] items).  However, a number of improvements in editing and displaying the contents of the wontology are possible when the software used (like [[Help:GlossaryPtoZ#anchor_WontoMedia|WontoMedia]]) understands the semantics and intended meaning of some of the terms.  In addition, if the content of a wontology is to be exchanged with other systems, it is helpful if it uses, or its internal vocabulary is based on, standardized item [[Help:GlossaryAtoO#anchor_Name|Names]] and meanings.

In order to allow WontoMedia to enforce rules (such as the fact that a [[Help:GlossaryPtoZ#anchor_Relationship|relationship]] cannot be both [[Help:GlossaryAtoO#anchor_Hierarchical|hierarchical]] and [[Help:GlossaryPtoZ#anchor_Peer|peer-to-peer]]) and to improve display, there is a set of built-in Property items (relationship types).  When adding material to a wontology, these properties can be used directly <em>or</em> they can be used as the basis for creating new properties with names and meanings more specific to the particular information being described.  Most of our [[Help:Tutorials|tutorials]] show the use of built-in properties directly, but [[Help:Tutorials/UsingSPO|the tutorial "Using sub_property_of"]] gives examples of how you can create a new property specific to your information based on the built-in properties.

This diagram shows the built-in Property items that WontoMedia includes (the ovals) and the main relationships between them (the arrows).  The gray text labeling each arrow is the name of the Property that defines the type of relationship between the items (that is, the [[Help:GlossaryPtoZ#anchor_Predicate|Predicate]] of the [[Help:GlossaryAtoO#anchor_Connection|connection]] which the arrow represents).  Each arrow head indicates the direction of the connection represented.  That is, the oval that an arrow starts from (no arrow head) is the connection's [[Help:GlossaryPtoZ#anchor_Subject|Subject]], and the oval that an arrow points to is the connection's [[Help:GlossaryAtoO#anchor_Object|Object]].

[[File:BuiltinPropertyHierarcy.png|center]]

All of the built-in items shown are property items, suitable for using as the predicates of connections you add to a wontology.  <tt>sub_property_of</tt> is not the only type of relationship that can be established between properties, but in most [[Help:GlossaryAtoO#anchor_Ontology|ontologies]] it is the most common.  Note that this diagram follows the WontoMedia convention of drawing connections that represent hierarchical relationships (like <tt>sub_property_of</tt>) primarily vertically, and drawing connections representing symmetric/peer relationships (like <tt>inverse_relationship</tt>) primarily horizontally.

Note that <tt>sub_property_of</tt> also illustrates how self-referential definitions are acceptable in an ontology.  <tt>sub_property_of</tt> is one of WontoMedia's built-in property items, and so is represented in the diagram with an oval.  Since it is a property item, <tt>sub_property_of</tt> can be used as the predicate for connections, so it also is used as the label for most of the arrows in the diagram.  And one of the connections that uses <tt>sub_property_of</tt> as is predicate is the connection that relates <tt>sub_property_of</tt> ''itself'' to the Hierarchical Relationship property.  This is neither a mistake nor some kind of infinite loop.  Connections do not define or create items, they just specify the relationships between items that already exist.  So, the <tt>sub_property_of</tt> item exists, and is a property-type item, simply because it was created that way.  And once created, it can be used as the predicate for any connections, including connections between itself and other items.

The set of built-in properties is how ontologies stored in WontoMedia are [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.10.7878 grounded] in the handful of special editing and display cases that WontoMedia "knows" about.  There is unique behavior in WontoMedia for each of the built-in property types, and that behavior can be extended to any other property in an ontology that WontoMedia is storing by creating a <tt>sub_property_of</tt> connection between the new property and the property to which it is similar.  This process of establishing similarity between properties can be seen within the set of built-in properties in the diagram.  For example, not only does <tt>sub_property_of</tt> have its own unique meaning (causing one property to be interpreted with the same WontoMedia behaviors as another), but it [[Wikipedia:Inheritance (computer science)|inherits]] the special meaning of Hierarchical Relationship (draw connections primarily vertically) as well.  Similarly:

* Symmetric Relationship and related properties indicate to WontoMedia that connections should be drawn primarily horizontally.
* Inverse Relationship implies everything that Symmetric Relationship does (because of the <tt>sub_property_of</tt> connection between them), ''plus'' any two properties associated to each other by <tt>inverse_relationship</tt> cause WontoMedia to automatically ''assume'' the presence of a connection using one any time a connection using the other is created within an ontology.  This can be seen in the diagram where one <tt>inverse_relationship</tt> connection relates <tt>predecessor_of</tt> to <tt>successor_of</tt> (the black arrow), and there is an ''assumed'' connection (the gray arrow) relating the two items in the opposite direction (reversing the subject and object).
* The <tt>parent_of</tt> and <tt>child_of</tt> properties are like Hierarchical Relationship (they imply a preference for drawing connections that use them vertically), but in addition they specify a preference for the physical relationship between items when they're drawn.  Using a <tt>parent_of</tt> property (or a sub-property of it) in a connection gives WontoMedia a preference for drawing the connection's subject item closer to the ''root'' of the hierarchy, with <tt>child_of</tt> property meaning the reverse.
* Similarly, <tt>predecessor_of</tt> and <tt>successor_of</tt> allow WontoMedia to determine the order of items that have an Ordered Relationship to each other.
* Finally, <tt>contains</tt>, <tt>part_of</tt>, and <tt>one_of</tt> all establish directional, hierarchical relationships, but they further imply that the relationship makes statements about ''set membership''.  For example, in a family, a son is the <tt>child_of</tt> a father, but you cannot say that the father <tt>contains</tt> the son.  <tt>contains</tt> and <tt>part_of</tt> are direct opposites of each other, and make relatively strong statements about the overlap of "sets" described by the items they reference.  <tt>one_of</tt> makes a weaker statement about inclusion that <tt>part_of</tt> does, and does not automatically imply that the opposite <tt>contains</tt> relationship is true.

The rest of this page lists all of the built-in properties provided by WontoMedia and further describes the types of relationships they are intended to represent.

<!-- illustration: hierarchy of relationships between built-in properties -->
Built-in properties alphabetically:
[[#anchor_applies_to_class|applies_to_class]] &mdash;
[[#anchor_child_of|child_of]] &mdash;
[[#anchor_contains|contains]] &mdash;
[[#anchor_has_item_object|has_item_object]] &mdash;
[[#anchor_has_scalar_object|has_scalar_object]] &mdash;
[[#anchor_hierarchical_relationship|hierarchical_relationship]] &mdash;
[[#anchor_inverse_relationship|inverse_relationship]] &mdash;
[[#anchor_is_instance_of|is_instance_of]] &mdash;
[[#anchor_max_uses_per_item|max_uses_per_item]] &mdash;
[[#anchor_one_of|one_of]] &mdash;
[[#anchor_ordered_relationship|ordered_relationship]] &mdash;
[[#anchor_parent_of|parent_of]] &mdash;
[[#anchor_part_of|part_of]] &mdash;
[[#anchor_peer_of|peer_of]] &mdash;
[[#anchor_predecessor_of|predecessor_of]] &mdash;
[[#anchor_property_object_is|property_object_is]] &mdash;
[[#anchor_property_subject_is|property_subject_is]] &mdash;
[[#anchor_sub_class_of|sub_class_of]] &mdash;
[[#anchor_sub_property_of|sub_property_of]] &mdash;
[[#anchor_successor_of|successor_of]] &mdash;
[[#anchor_symmetric_relationship|symmetric_relationship]] &mdash;
[[#anchor_value_relationship|value_relationship]]

Built-in properties grouped by use:
* [[#anchor_sub_class_of|sub_class_of]], [[#anchor_sub_property_of|sub_property_of]], [[#anchor_is_instance_of|is_instance_of]]
* [[#anchor_value_relationship|value_relationship]], [[#anchor_hierarchical_relationship|hierarchical_relationship]], [[#anchor_ordered_relationship|ordered_relationship]]
* [[#anchor_symmetric_relationship|symmetric_relationship]], [[#anchor_inverse_relationship|inverse_relationship]], [[#anchor_peer_of|peer_of]]
* [[#anchor_parent_of|parent_of]], [[#anchor_child_of|child_of]], [[#anchor_contains|contains]], [[#anchor_part_of|part_of]], [[#anchor_one_of|one_of]]
* [[#anchor_predecessor_of|predecessor_of]], [[#anchor_successor_of|successor_of]]
* [[#anchor_property_object_is|property_object_is]], [[#anchor_property_subject_is|property_subject_is]], [[#anchor_applies_to_class|applies_to_class]]
* [[#anchor_has_item_object|has_item_object]], [[#anchor_has_scalar_object|has_scalar_object]], [[#anchor_max_uses_per_item|max_uses_per_item]]

<span id="anchor_property_subject_is"></span>
;property_subject_is
:'''Property's Subject is a''' This property is used to define/restrict the set of items that are permissable choices for the <em>subject</em> item of <em>another</em> property.  For example, consider a the connection "myRelationship property_subject_is MyClass".  The existence of this connection restricts the content of the wontology so that the only acceptable subject items for relationships where "myRelationship" is the predicate are items that are instances of "MyClass" or of one of MyClass' child sub-classes.  When a property_subject_is relationship is created, it affects the options available for creating and editing connections&mdash;pages will be populated only with options consistent with the current state of the data.
<span id="anchor_property_object_is"></span>
;property_object_is
:'''Property's Object is a''' This property is used to define/restrict the set of items that are permissable choices for the <em>object</em> item of <em>another</em> property.  For example, consider the statement "myRelationship property_object_is myClass".  The existence of this connection restricts the content of the wontology so that the only acceptable subject items for relationships where "myRelationship" is the predicate are items that are instances of "myClass" or of one of myClass' child sub-classes.
<span id="anchor_applies_to_class"></span>
;applies_to_class
:'''Applies to the Class''' This property is used to provide hints about the connections a user will likely create to go with items that are instances of a particular class.  For example, a wontology that is intended to contain a number of items that represent people, might contain a category item named "Person" to represent the class of all the individual person items.  Given that class, the connection "birthDate applies_to_class Person" makes the statement that it is likely (not mandatory) that each item which is_instance_of Person will have at least one connection using the property "birthDate" as a predicate.  The system uses this information to automatically create, each time a user makes a new instance item, a list of connections (with empty object item references) for the user to fill in.
<span id="anchor_has_scalar_object"></span>
;has_scalar_object
:'''Has a Scalar Value for its Object''' This property is used to define/restrict the permissable choices for the object item of <em>another</em> property.  For example, consider the statement "myRelationship has_scalar_object String_Value". This connection says that the objects of all connections that use "myRelationship" as their predicate should be scalar (single valued) constants, and that String_Value is the acceptable type for those constants. When a connection like this is present, and a new connection is being defined, once a has_scalar_object-property is selected, only a text-entry box (and not an item selector) will be displayed, and its content will be limited to what is acceptable for the type specified by the has_scalar_object relationship's own object item.
<span id="anchor_has_item_object"></span>
;has_item_object
:'''Has an Item for its Object''' This property is used to define/restrict the set of permissable choices for the object item of <em>another</em> property.  For example, consider the statement "myRelationship has_item_object 'True'".  This connection says that the objects of all connections that use "myRelationship" as their predicate should be an item and not a constant.  (Note that the existence of a connection using has_item_object is the important thing, and that the object of such a connection is ignored.  By convention it is filled in with the String "True", but this is not checked by the system.) When a connection like this is present, and a new connection is being defined, once a has_item_object-property is selected, only an item selector (and not a text-entry box) will be displayed.
<span id="anchor_max_uses_per_item"></span>
;max_uses_per_item
:'''Maximum Number of Uses Per Item is''' This property is used to define/restrict how connections using a particular predicate item can be made.  The subject of connections using max_uses_per_item must be a property item, and the object must be an integer constant.  For example, if a wontology contains the connection "myProperty max_uses_per_item 7", it will prevent users from creating more than seven connections using "myProperty" as predicate with the same subject item.  Connections using this property affect the count (cardinality) of the specified relationship's subject items only, and does not place restrictions on the number of times an item can be referenced as the object of connections.
<span id="anchor_peer_of"></span>
;peer_of
:'''Peer Of''' A relationship of this type between two items indicates a relationship between equals.  This would be appropriate, for example, as a description of the "synonym" relationship that might occur between the entries for two words in a thesaurus. The system makes two assumptions about items that have a Peer-Of relationship to each other.  First, the relationship is assumed to be bidirectional.  Saying that "A is a Peer-Of B" implies that "B is a Peer-Of A", and it doesn't matter which of the two "directions" is used when the relationship is first created. Second, when showing the graph of relationships between items, the system will attempt to indicate Peer-Of relationships as primarily horizontal.
<span id="anchor_one_of"></span>
;one_of
:'''One Of''' A relationship of this type between two items is hierarchical. This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A is One-Of B", and like "macintosh" in "macintosh is One-Of computer") is assumed to be more specific or more narrow than the object of the relationship ("B" and "computer").  When showing a graph of relationships between items, the system will attempt to indicate 'One-Of' relationships as primarily vertical, with the object-item drawn nearer "the root" of the graph and the subject-item toward "the leaves". <br />'One Of' is most appropriate for showing relationships between an individual and a category.  Relationships between two categories are better indicated with 'Child Of', as in "computer is Child-Of electronics" (assuming, of course, that they're both categories). <br />'One Of' is itself a child of 'Child Of'.  And 'Child Of' is the opposite of 'Parent Of', and finally 'Contains' is a child of 'Parent Of'.  So, it might be possible to infer that 'One Of' and 'Contains' are approximate opposites of each other.  However, making a 'One Of' relationship between two items will not automatically cause the symmetric 'Contains' relationship to be created.
<span id="anchor_part_of"></span>
;part_of
:'''Part Of''' A relationship of this type between two items is hierarchical. This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A is Part-Of B", and like "SoftwareTesting" in "SoftwareTesting is Part-Of ComputerSoftware" in a categorization of engineering disciplines) is assumed to be more specific/narrow than, and contained within, what corresponds to the object of the relationship ("B" and "ComputerSoftware"). When showing a graph of connections between items, the system will attempt to indicate 'Part-Of' relationships as primarily vertical, with the object-item drawn nearer "the root" of the graph and the subject-item toward "the leaves".<br />'Part Of' is most appropriate for showing relationships that would be indicated by complete inclusion when drawing a Ven Diagram. That is, if drawing a Ven Diagram of how categories relate to each other, the category corresponding to the subject item of this relationship would be drawn entirely within the category corresponding to the object item.  In this way, it is more restrictive than the 'One Of' relationship, which indicates membership without implying complete overlap.<br />'Part Of' is the opposite of 'Contains'.  Creating a relationship that states one category is 'Part Of' another is exactly the same as creating a 'Contains' relationship with the subject and object reversed, and the system will list the relationship between them using both relationship names.  'Part Of' is itself a child of 'Child Of'.  (And 'Child Of' is the opposite of 'Parent Of', and finally 'Contains' is a child of 'Parent Of'.)
<span id="anchor_contains"></span>
;contains
:'''Contains''' A relationship of this type between two items is hierarchical. This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A Contains B", and like "spacecraft" in "spacecraft Contains apollo") is more general or broad than the object of the relationship ("B" and "apollo"). When showing a graph of relationships between items, the system will attempt to indicate 'Contains' relationships as primarily vertical, with the subject-item drawn nearer "the root" of the graph and the object-item toward "the leaves". <br />'Contains' is most appropriate for showing relationships between a category and an individual.  Relationships between two categories are better indicated with 'Parent Of', as in "vehicle Contains spacecraft" (assuming, of course, that both are categories). <br />'Contains' is actually Child-Of 'Parent Of'.  'Parent Of' and 'Child Of' are opposites of each other, and 'One Of' is a child of 'Child Of'.  But this does not make 'Contains' and 'Child Of' opposites of each other, though an approximation of opposite-ness could be inferred.  The system will not automatically cause a 'Child Of' relationship to be created when a 'Contains' relationship is.
<span id="anchor_parent_of"></span>
;parent_of
:'''Parent Of''' This is the fundamental type of hierarchical relationship.  This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A is the Parent-Of B", and like "vehicle" in "vehicle is Parent-Of spacecraft") is a super-set of the object of the relationship ("B" and "spacecraft").  When showing a graph of relationships between items, the system will attempt to indicate 'Parent Of' relationships as primarily vertical, with the subject-item drawn nearer "the root" of the graph and the object-item toward "the leaves". <br />'Parent Of' is typically appropriate for relationships between two categories or between two individuals.  To indicate that a category contains an individual, the more specific 'Contains' can be used. <br />'Parent Of' is the opposite of 'Child Of'.  Creating a relationship that states one category is 'Parent Of' another is exactly the same as creating a 'Child Of' relationship with the subject and object reversed, and the system will list the relationship between then using both relationship names (which name is given priority depends on which item is more central to the display).
<span id="anchor_child_of"></span>
;child_of
:'''Child Of''' This is the fundamental type of hierarchical relationship.  This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A is a Child-Of B", and like "spacecraft" in "spacecraft is Child-Of vehicle") is a subset of the object of the relationship ("B" and "vehicle").  When showing a graph of relationships between items, the system will attempt to indicate 'Child Of' relationships as primarily vertical, with the object-item drawn nearer "the root" of the graph and the subject-item toward "the leaves". <br />'Child Of' is typically appropriate for relationships between two categories or between two individuals.  To indicate that an individual is contained by a category, the more specific 'One Of' can be used. <br />'Child Of' is the opposite of 'Parent Of'.  Creating a relationship that states one category is 'Child Of' another is exactly the same as creating a 'Parent Of' relationship with the subject and object reversed, and the system will list the relationship between then using both relationship names (which name is given priority depends on which item is more central to the display).
<span id="anchor_predecessor_of"></span>
;predecessor_of
:'''Predecessor Of''' This relationship states that the subject (left-hand side) of the relationship ("A" in the relationship "A is a Predecessor-Of B") precedes the object in some type of ordered sequence or collection.
<span id="anchor_successor_of"></span>
;successor_of
:'''Successor Of''' This relationship states that the subject (left-hand side) of the relationship ("N" in the relationship "N is a Successor-Of M") follows the object in some type of ordered sequence or collection.
<span id="anchor_inverse_relationship"></span>
;inverse_relationship
:'''Inverse Relationship''' This relationship is used to characterize how two other relationships relate to each other.  This relationship is used to denote that two other relationships are symmetric and inseparable opposites of each other.  For example, "Child-Of has Inverse-Relationship to Parent-Of".  the system will interpret any two relationships linked by 'Inverse Relationship' (or by a non-built in relationship that is marked as a 'SubProperty Of' 'Inverse Relationship') as being identical antonyms of each other.  Any time one relationship is created, the system will automatically infer, create, and show the matching opposite (inverse) relationship's name.
<span id="anchor_sub_class_of"></span>
;sub_class_of
:'''SubClass Of''' This relationship is used to connect two items, both representing classes, indicating that the subject item is a sub-class of the object item.  For example, the connection "Ships is a SubClass-Of Vehicles" links the two class items, and makes the statement that "Ships" are a more specific kind of "Vehicles".  Once this connection is established, the system will behave as if everything that is true about "Vehicles" is also true for "Ships" (although not vice-versa).  For example, if another property is defined such that its object items are required to be instances of the "Vehicles" class, then having this connection allows instances of "Ships" to be used as well.  But, another property whose objects are required to be "Ships" is not affected, and other "Vehicles" still cannot be used.
<span id="anchor_sub_property_of"></span>
;sub_property_of
:'''SubProperty Of''' This relationship is used to relate two other relationships to each other.  The statement "A is a SubProperty-Of B" says that the relationship A makes a more specific, narrow claim about items it relates than the relationship B does.  However, if the system has special behavior or handling for relationship B, the 'SubProperty Of' statement allows it to determine it should apply that special behavior to A as well. <br />For example, when drawing relationship graphs, the system attempts to draw all instances of 'Symmetric Relationship" in a primarily horizontal way.  There is a built-in statement that "Peer-Of is a SubProperty-Of Symmetric-Relationship", which causes 'Peer Of' relationships to be (preferentially) drawn horizontally, as will be any other types of relationships that are added to an ontology with the system.
<span id="anchor_sub_class_of"></span>
;sub_class_of
:'''SubClass Of''' This relationship is used to connect two items, both representing classes, indicating that the subject item is a sub-class of the object item.  For example, the connection "Ships is a SubClass-Of Vehicles" links the two class items, and makes the statement that "Ships" are a more specific kind of "Vehicles".  Once this connection is established, the system will behave as if everything that is true about "Vehicles" is also true for "Ships" (although not <i>vice versa</i>).  For example, if another property is defined such that its object items are required to be instances of the "Vehicles" class, then having this connection allows instances of "Ships" to be used as well.  But, another property whose objects are required to be "Ships" is not affected, and other "Vehicles" still cannot be used.
<span id="anchor_is_instance_of"></span>
;is_instance_of
:'''Is an Instance Of''' This relationship is used to connect one item with a second item representing the class of which the first item is a member.  For example, the connection "QueenMary is_instance_of Ships" states that the Queen Mary is a ship, and allows the system to apply all of the rules that pertain to instances of "Ships" to the "QueenMary" item, and allows the "QueenMary" item to be referenced from contexts that require a member of "Ships".
<span id="anchor_symmetric_relationship"></span>
;symmetric_relationship
:'''Symmetric Relationship''' This is a root element in the system's internal schema.  All relationship (property) classes are children of one of three root relationship types, including this one.
<span id="anchor_value_relationship"></span>
;value_relationship
:'''Value Relationship''' This is a root element in the system's internal schema.  All relationship (property) classes are children of one of three root relationship types, including this one.
<span id="anchor_hierarchical_relationship"></span>
;hierarchical_relationship
:'''Hierarchical Relationship''' This is a root element in the system's internal schema.  All relationship (property) classes are children of one of three root relationship types, including this one.
<span id="anchor_ordered_relationship"></span>
;ordered_relationship
:'''Ordered Relationship''' This is a root element in the system's internal schema.  Properties should be made sub_property_of this property if they imply an order between their subject and object. Among other things, this property allows the system to make UI decisions.
